public interface Estados {
    public void inserirMoeda();
    public void ejetarMoeda();
    public void reabastecer();
    
}
-----------------------------------------------------------------------

public class MoedaInserida implements Estados {

    MaquinaDeChiclete maquinaDeChiclete;
  
    public MoedaInserida(){
      
    }
      public MoedaInserida(MaquinaDeChiclete maquinaDeChiclete) {
      this.maquinaDeChiclete = maquinaDeChiclete;
    }
  
      @Override
      public void inserirMoeda() {
          System.out.println("A moeda já está inserida, retire seu chiclete");
          
      }
  
      @Override
      public void ejetarMoeda() {
        System.out.println("Ejetando moeda...");
        maquinaDeChiclete.setEstado(new SemMoeda(maquinaDeChiclete));
        // ir para o estado sem moeda
      }
  
      @Override
      public void reabastecer() {
        System.out.println("Não precisa reabastecer");
       
      }
  
     
      
  
      }
      
 --------------------------------------------------------------------------
  
 public class SemMoeda implements Estados {

    MaquinaDeChiclete maquinaDeChiclete;

    public SemMoeda(MaquinaDeChiclete maquinaDeChiclete) {
        this.maquinaDeChiclete = maquinaDeChiclete;
    }

    @Override
    public void inserirMoeda() {
       System.out.println("inserindo uma moeda");
    }

    @Override
    public void ejetarMoeda() {
       System.out.println("Não há moeda para ser retirada");
     


    }

    @Override
    public void reabastecer() {
       System.out.println("Não pode ser reabastecida pois a maquina está sem moeda");
    }

    
    
}
------------------------------------------------------------------------

public class DispensandoChiclete implements Estados {

    
    MaquinaDeChiclete maquinaDeChiclete;
  
    
    public DispensandoChiclete(){
  
    }
    public DispensandoChiclete(MaquinaDeChiclete maquinaDeChiclete) {
    this.maquinaDeChiclete = maquinaDeChiclete;
    
  }
       
     
  
      @Override
      public void inserirMoeda() {
          System.out.println("espere a operação terminar para inserir uma moeda");
      }
  
      @Override
      public void ejetarMoeda() {
          System.out.println("não é possivel devolver a moeda, pois o chiclete já está sendo dispensado");
      }
  
      @Override
      public void reabastecer() {
          System.out.println("precisa reabastecer");
          maquinaDeChiclete.numeroDeChiclete -= 1;
            
         
      }
  
      
  
      
    }
----------------------------------------------------------------------------------
  public class MaquinaDeChiclete {
    

    int numeroDeChiclete = 100;
   

  
    Estados estado;

   public MaquinaDeChiclete(){
    
   }
    
    

    public void setEstado(Estados estado) {
        this.estado = estado;
    }

    public void inserirMoeda(){
        estado.inserirMoeda();
        
    }
    public void ejetarMoeda(){
        estado.ejetarMoeda();

    }
    public void reabastecer(){
        estado.reabastecer();
    }    
    
    public int getNumeroDeChiclete() {
        return numeroDeChiclete;
    }
    public void setNumeroDeChiclete(int numeroDeChiclete) {
        this.numeroDeChiclete = numeroDeChiclete;
    }
    
}
--------------------------------------------------------------------------------

public static void main(String[] args){
        
    MaquinaDeChiclete maquinaDeChiclete = new MaquinaDeChiclete();

    System.out.println("-----------SEM MOEDA-----------");
    maquinaDeChiclete.setEstado(new SemMoeda(maquinaDeChiclete));
    maquinaDeChiclete.ejetarMoeda();

    

    System.out.println("---MOEDA INSERIDA---");
    maquinaDeChiclete.setEstado(new MoedaInserida(maquinaDeChiclete));
    maquinaDeChiclete.ejetarMoeda();
    maquinaDeChiclete.ejetarMoeda();


   
    System.out.println("---------DISPENSANDO CHICLETE-----------");
    maquinaDeChiclete.setEstado(new DispensandoChiclete(maquinaDeChiclete));
    maquinaDeChiclete.reabastecer();
    
    

   
}

